# Home page
GET        /                                                 controllers.Application.index
GET        /ligues                                           controllers.Application.ligues

# Contact
GET        /contacts                                         controllers.Application.contact

# Event
GET        /events                                           controllers.Application.event
GET        /eventsList                                       controllers.Application.eventsList
GET        /eventsCal                                        controllers.Application.eventsCalendar

# Ligue, Comite, Club
GET        /ligues/:ligue                                    controllers.Application.ligue(ligue)
GET        /ligues/:ligue/body                               controllers.Application.ligueBody(ligue)
GET        /ligues/:ligue/comites/:comite                    controllers.Application.comite(ligue,comite )
GET        /ligues/:ligue/comites/:comite/body               controllers.Application.comiteBody(ligue,comite )
GET        /ligues/:ligue/comites/:comite/clubs/:club        controllers.Application.club(ligue, comite, club)

# Ligue Rank
GET        /ligues/:ligue/single                             controllers.Classements.ligueSingle(ligue)
GET        /ligues/:ligue/feminine                           controllers.Classements.ligueFeminine(ligue)
GET        /ligues/:ligue/junior                             controllers.Classements.ligueJunior(ligue)
GET        /ligues/:ligue/double                             controllers.Classements.ligueDoublette(ligue)
GET        /ligues/:ligue/team                               controllers.Classements.ligueTeam(ligue)

# Comite Rank
GET        /ligues/:ligue/comites/:comite/single             controllers.Classements.comiteSingle(ligue, comite)
GET        /ligues/:ligue/comites/:comite/feminine           controllers.Classements.comiteFeminine(ligue, comite)
GET        /ligues/:ligue/comites/:comite/junior             controllers.Classements.comiteJunior(ligue, comite)
GET        /ligues/:ligue/comites/:comite/double             controllers.Classements.comiteDoublette(ligue, comite)
GET        /ligues/:ligue/comites/:comite/team               controllers.Classements.comiteTeam(ligue, comite)

# Tournament
GET        /ligues/:ligue/tour/:tour                         controllers.Application.ligueTournament(ligue, tour)
GET        /ligues/:ligue/comites/:comite/tour/:tour         controllers.Application.comiteTournament(ligue, comite, tour)

# Detail
GET        /ligues/:ligue/team/day/:day/:team1/:team2        controllers.Detail.team(ligue,day:Int,team1,team2)

# Map static resources from the /public folder to the /assets URL path
GET        /assets/*file                                     controllers.Assets.at(path="/public", file)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Authentication Secure Social

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized
