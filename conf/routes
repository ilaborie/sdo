 
# The MIT License (MIT)
#
# Copyright (c) 2013 Igor Laborie
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Home page
GET         /                                                     controllers.OrgaLigue.index
GET         /ligues                                               controllers.OrgaLigue.ligues

# Contact
GET         /contacts                                             controllers.Contact.contact

# Event
GET         /events                                               controllers.Event.event
GET         /events/list                                          controllers.Event.eventsList
GET         /events/calendar                                      controllers.Event.eventsCalendar
GET         /events/sdo.ics                                       controllers.Event.icalendar

# Ligue, Comite, Club
GET         /ligues/:ligue                                        controllers.OrgaLigue.ligue(ligue)
GET         /ligues/:ligue/body                                   controllers.OrgaLigue.ligueBody(ligue)
GET         /ligues/:ligue/comites/:comite                        controllers.OrgaComite.comite(ligue,comite )
GET         /ligues/:ligue/comites/:comite/body                   controllers.OrgaComite.comiteBody(ligue,comite )
GET         /ligues/:ligue/comites/:comite/clubs/:club            controllers.OrgaComite.club(ligue, comite, club)

# Ligue Rank
GET         /ligues/:ligue/ranking.pdf                            controllers.RankingLigue.liguePDF(ligue)
GET         /ligues/:ligue/single                                 controllers.RankingLigue.ligueMens(ligue)
GET         /ligues/:ligue/single.pdf                             controllers.RankingLigue.ligueMensPDF(ligue)
GET         /ligues/:ligue/ladies                                 controllers.RankingLigue.ligueLadies(ligue)
GET         /ligues/:ligue/ladies.pdf                             controllers.RankingLigue.ligueLadiesPDF(ligue)
GET         /ligues/:ligue/youth                                  controllers.RankingLigue.ligueYouth(ligue)
GET         /ligues/:ligue/youth.pdf                              controllers.RankingLigue.ligueYouthPDF(ligue)
GET         /ligues/:ligue/pairs                                  controllers.RankingLigue.liguePairs(ligue)
GET         /ligues/:ligue/pairs.pdf                              controllers.RankingLigue.liguePairsPDF(ligue)

# Inter-Comite Rank
GET         /ligues/:ligue/ic-ranking.pdf                         controllers.RankingInterComite.interComitePDF(ligue)
GET         /ligues/:ligue/ic-single                              controllers.RankingInterComite.interComiteMens(ligue)
GET         /ligues/:ligue/ic-single.pdf                          controllers.RankingInterComite.interComiteMensPDF(ligue)
GET         /ligues/:ligue/ic-ladies                              controllers.RankingInterComite.interComiteLadies(ligue)
GET         /ligues/:ligue/ic-ladies.pdf                          controllers.RankingInterComite.interComiteLadiesPDF(ligue)
GET         /ligues/:ligue/ic-youth                               controllers.RankingInterComite.interComiteYouth(ligue)
GET         /ligues/:ligue/ic-youth.pdf                           controllers.RankingInterComite.interComiteYouthPDF(ligue)
GET         /ligues/:ligue/ic-pairs                               controllers.RankingInterComite.interComitePairs(ligue)
GET         /ligues/:ligue/ic-pairs.pdf                           controllers.RankingInterComite.interComitePairsPDF(ligue)
GET         /ligues/:ligue/ic-team                                controllers.RankingInterComite.interComiteTeam(ligue)
GET         /ligues/:ligue/team.pdf                               controllers.RankingInterComite.interComiteTeamPDF(ligue)

# Comite Rank
GET         /ligues/:ligue/comites/:comite/ranking.pdf            controllers.RankingComite.comitePDF(ligue, comite)
GET         /ligues/:ligue/comites/:comite/single                 controllers.RankingComite.comiteSingle(ligue, comite)
GET         /ligues/:ligue/comites/:comite/single.pdf             controllers.RankingComite.comiteSinglePDF(ligue, comite)
GET         /ligues/:ligue/comites/:comite/ladies                 controllers.RankingComite.comiteLadies(ligue, comite)
GET         /ligues/:ligue/comites/:comite/ladies.pdf             controllers.RankingComite.comiteLadiesPDF(ligue, comite)
GET         /ligues/:ligue/comites/:comite/youth                  controllers.RankingComite.comiteYouth(ligue, comite)
GET         /ligues/:ligue/comites/:comite/youth.pdf              controllers.RankingComite.comiteYouthPDF(ligue, comite)
GET         /ligues/:ligue/comites/:comite/pairs                  controllers.RankingComite.comitePairs(ligue, comite)
GET         /ligues/:ligue/comites/:comite/pairs.pdf              controllers.RankingComite.comitePairsPDF(ligue, comite)
GET         /ligues/:ligue/comites/:comite/team                   controllers.RankingComite.comiteTeam(ligue, comite)
GET         /ligues/:ligue/comites/:comite/team.pdf               controllers.RankingComite.comiteTeamPDF(ligue, comite)

# Tournament
GET         /ligues/:ligue/tour/:tour                             controllers.OrgaLigue.ligueTournament(ligue, tour)
GET         /ligues/:ligue/comites/:comite/tour/:tour             controllers.OrgaComite.comiteTournament(ligue, comite, tour)

# Team Championship
GET         /ligues/:ligue/team/day/:day/:team1/:team2            controllers.Detail.team(ligue,day:Int,team1,team2)
GET         /ligues/:ligue/team/day/:day/:team1/:team2/pdf        controllers.Detail.teamPDF(ligue,day:Int,team1,team2)
POST        /ligues/:ligue/team/result                            controllers.Detail.result(ligue)

# User
GET         /user/profile                                         controllers.Users.profile
GET         /user/admin                                           controllers.Users.admin

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                         controllers.Assets.at(path="/public", file)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Authentication Secure Social

# Login page
GET         /login                                                securesocial.controllers.LoginPage.login
GET         /logout                                               securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET         /signup                                               securesocial.controllers.Registration.startSignUp
POST        /signup                                               securesocial.controllers.Registration.handleStartSignUp
GET         /signup/:token                                        securesocial.controllers.Registration.signUp(token)
POST        /signup/:token                                        securesocial.controllers.Registration.handleSignUp(token)
GET         /reset                                                securesocial.controllers.Registration.startResetPassword
POST        /reset                                                securesocial.controllers.Registration.handleStartResetPassword
GET         /reset/:token                                         securesocial.controllers.Registration.resetPassword(token)
POST        /reset/:token                                         securesocial.controllers.Registration.handleResetPassword(token)
GET         /password                                             securesocial.controllers.PasswordChange.page
POST        /password                                             securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET         /authenticate/:provider                               securesocial.controllers.ProviderController.authenticate(provider)
POST        /authenticate/:provider                               securesocial.controllers.ProviderController.authenticateByPost(provider)
GET         /not-authorized                                       securesocial.controllers.ProviderController.notAuthorized
